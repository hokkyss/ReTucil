/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stima.tucil3;
import static com.teamdev.jxbrowser.engine.RenderingMode.HARDWARE_ACCELERATED;

import com.teamdev.jxbrowser.browser.Browser;
import com.teamdev.jxbrowser.engine.Engine;
import com.teamdev.jxbrowser.engine.EngineOptions;
import com.teamdev.jxbrowser.view.swing.BrowserView;
import java.awt.BorderLayout;
import java.util.*;
import java.io.*;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileFilter;

import stima.constants.Constants;
/**
 *
 * @author PERSONAL
 */
public class App extends javax.swing.JFrame
{
    private File inputFile;
    private Scanner fileInput;
    
    private String firstNodeChosen;
    private Integer firstNodeIndex;
    private String secondNodeChosen;
    private Integer secondNodeIndex;
    
    // Keperluan algoritma
    private Double[][] adjacencyMatrix;
    private ArrayList<Trituple> nodes;
    private Integer numOfNodes;
    /**
     * Creates new form App
     */
    public App(){
        initComponents();
        loadMaps();
        this.inputFile = null;
        this.fileInput = null;
        this.firstNodeChosen = null;
        this.secondNodeChosen = null;
        this.adjacencyMatrix = null;
        this.nodes = null;
        this.numOfNodes = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseDialog = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();
        MapsPanel = new javax.swing.JPanel();

        browseDialog.setAcceptAllFileFilterUsed(false);
        browseDialog.setCurrentDirectory(new java.io.File("C:\\Users\\PERSONAL\\Desktop\\KULIAH\\IF2211 STIMA\\Tugas Kecil 3\\test"));
        browseDialog.setName("browseDialog"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setText("Re:Tucil");

        browseButton.setLabel("Browse");
        browseButton.setName("browseButton"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        fileNameLabel.setText("file not found!");

        MapsPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout MapsPanelLayout = new javax.swing.GroupLayout(MapsPanel);
        MapsPanel.setLayout(MapsPanelLayout);
        MapsPanelLayout.setHorizontalGroup(
            MapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );
        MapsPanelLayout.setVerticalGroup(
            MapsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileNameLabel)
                    .addComponent(browseButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(MapsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileNameLabel)
                .addContainerGap(393, Short.MAX_VALUE))
            .addComponent(MapsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        try
        {    
            FileFilter filter = new FileNameExtensionFilter("Text files", "txt");
            this.browseDialog.setFileFilter(filter);
            this.browseDialog.showOpenDialog(this);
            
            inputFile = browseDialog.getSelectedFile();
            fileInput = new Scanner(inputFile);
            convertFileToGraph();
            
            this.browseButton.setText("Change");
            fileNameLabel.setText(inputFile.getName());
        }
        catch (Exception e)
        {
            this.browseButton.setText("Browse");
            fileNameLabel.setText("file not found");
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MapsPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JFileChooser browseDialog;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    
    private void convertFileToGraph()
    {
        int N = fileInput.nextInt();
        this.numOfNodes = N;
        
        // dummy untuk memindahkan baris
        fileInput.nextLine();
        
        nodes = new ArrayList<>();
        
        Double lat, lng;
        String name;
        
        for(int i = 1; i <= N; i++)
        {
            lat = fileInput.nextDouble();
            lng = fileInput.nextDouble();
            name = fileInput.nextLine().trim();
            nodes.add(new Trituple(lat, lng, name));
        }
        
        adjacencyMatrix = new Double[N][N];
        for(int i = 0; i < N; i++)
        {
            for(int j = 0; j < N; j++)
            {
                adjacencyMatrix[i][j] = fileInput.nextDouble();
            }
        }
    }
    
    private void AStarAlgorithm()
    {
        PriorityQueue<PriorityQueueEntry> queue = new PriorityQueue<>();
        boolean[] visited = new boolean[numOfNodes];
        
        queue.add(new PriorityQueueEntry(0, 0, firstNodeIndex, new ArrayList<>()));
        
        PriorityQueueEntry top = null;
        Double currentDistance = null;
        Double estimatedDistance = null;
        Integer currentNodeIndex = null;
        ArrayList<Integer> paths = null;
        
        while(!queue.isEmpty())
        {
            top = queue.poll();
            currentDistance = top.distanceSoFar;
            estimatedDistance = top.sum;
            currentNodeIndex = top.nodeIndex;
            paths = top.path;
            
            if(visited[currentNodeIndex]) continue;
            
            if(currentNodeIndex == secondNodeIndex) break;
            
            visited[currentNodeIndex] = true;
            for(int i = 0; i <= numOfNodes; i++)
            {
                if(i == currentNodeIndex) continue;
                
                Double nextDistance = currentDistance + adjacencyMatrix[currentNodeIndex][i];
                Double nextEstimatedDistance = currentDistance + nodes.get(i).straightLineDistance(nodes.get(currentNodeIndex));
                Integer nextNode = i;
                
                ArrayList<Integer> newPath = new ArrayList<>();
                // copy semua paths ke dalam newPath
                for(Integer passedNodes : paths)
                {
                    newPath.add(passedNodes);
                }
                newPath.add(currentNodeIndex);
                
                queue.add(new PriorityQueueEntry(nextDistance, nextEstimatedDistance, nextNode, newPath));
            }
        }
        
        // sudah sampai tujuan, atau queue kosong
        if(queue.isEmpty())
        {
            return;
        }
        // sudah pasti sampai tujuan
        
        /* TODO:
            Implementasikan path yang diambil ke MAP API */
    }
    
    private void loadMaps(){
        System.setProperty("jxbrowser.license.key", "1BNDHFSC1FYNQ0G0I8NSW5HX5CAC271M98DIQCD0NF84MDN82Z3XELT23S4LRUXFZG51X0");
        EngineOptions options = EngineOptions.newBuilder(HARDWARE_ACCELERATED).build();
        Engine engine = Engine.newInstance(options);
        Browser browser = engine.newBrowser();

        SwingUtilities.invokeLater(() -> {
            BrowserView view = BrowserView.newInstance(browser);
            
            JPanel panel = new JPanel(new BorderLayout());
            panel.add(view);
            panel.setSize(1200,800); //gmn cara buat size nya dinamis
            MapsPanel.add(panel);
            MapsPanel.revalidate();
            MapsPanel.repaint();
            
            browser.navigation().loadUrl("http://maps.google.com"); 
        });
    }
}
